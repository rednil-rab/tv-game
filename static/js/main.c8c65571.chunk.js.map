{"version":3,"sources":["Components/Button.tsx","Components/Input.tsx","requests/requests.ts","Components/Placeholder.tsx","hooks/useWindowsize.ts","Components/PopUp/Stat.tsx","Components/PopUp/PopUp.tsx","utils.ts","Components/LifeBar/LifeBar.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Button","props","StyledButton","styled","button","background","className","onClick","clickHandler","text","Input","onInput","InputHandler","API_KEY","getShows","a","axios","get","result","showArray","data","results","map","show","makeShowType","response","name","description","overview","date","first_air_date","Placeholder","useWindowResize","initSize","window","innerWidth","innerHeight","useState","windowSize","setWindowSize","useEffect","handleResize","addEventListener","removeEventListener","Stat","StyledStatDiv","div","StyleStatLabel","color","style","margin","num","PopUp","StyledDiv","display","iterations","stats","length","popUps","stat","index","interations","hideLetters","str","undefined","split","char","Math","random","join","LifeBar","StyledContainer","App","arr","bool","score","setScore","shows","setShows","setIndex","loaded","setLoaded","guess","setGuess","hint","setHint","Number","localStorage","getItem","right","setRight","wrong","setWrong","popUp","setPopUp","used","setUsed","placeholder","setPlaceholder","life","setLife","useWindowSize","notifySucces","toast","success","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","notifyError","error","requests","temp","console","log","utils","makeShows","handleClickPopUp","resetGame","Spinner","animation","statContainer","e","target","value","toLowerCase","setItem","JSON","stringify","document","getElementsByClassName","opacity","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c8c65571.chunk.js","sourcesContent":["import React from 'react';\r\nimport * as types from '../types/types'\r\nimport styled from 'styled-components'\r\n\r\n\r\n\r\nconst Button: React.FC<types.ButtonProps> = (props) => {\r\n    const StyledButton = styled.button`\r\n    width: 150px;\r\n    height: 45px;\r\n    border-radius: 30px;\r\n    color: #ffffff;\r\n    border: none;\r\n    font-size: 16px;\r\n    cursor: pointer;\r\n    transition: background-color 300ms ease;\r\n    background: ${props.background};\r\n    margin: 10px;\r\n    `\r\n    return (\r\n        <StyledButton className=\"btn\" onClick={props.clickHandler}>{props.text}</StyledButton>\r\n    )\r\n\r\n}\r\n\r\nexport default Button;","import React from 'react';\r\nimport * as types from '../types/types'\r\n\r\nconst Input: React.FC<types.placeholderProps> = (props) => <input className=\"guess\" onInput={props.InputHandler}></input>\r\n\r\nexport default Input;","import axios, {AxiosResponse} from 'axios';\r\nimport * as types from '../types/types';\r\n\r\nconst API_KEY = '?api_key=3fdaa33085edc159f3194e8492441486'\r\n\r\nexport async function getShows(): Promise<types.Show[]>   {\r\n    try {\r\n        const result: AxiosResponse = await axios.get(`https://api.themoviedb.org/3/tv/top_rated${API_KEY}`);\r\n        // do something with the result to make a Show array\r\n        const showArray: types.Show[] = result.data.results.map((show: any) => {\r\n           return makeShowType(show)\r\n        })\r\n        return showArray;\r\n    } catch (e) {\r\n        return []\r\n    }\r\n    \r\n\r\n}\r\n\r\nfunction makeShowType(response: any): types.Show {\r\n    let show: types.Show = {\r\n        name: response.name,\r\n        description: response.overview,\r\n        date: response.first_air_date\r\n    }\r\n    return show;\r\n}","import React from 'react';\r\n\r\ninterface PlaceholderProps {\r\n    text: string;\r\n}\r\n\r\n\r\n\r\nconst Placeholder: React.FC<PlaceholderProps> = (props) => <h1 className=\"placeholder\" >{props.text}</h1>\r\n\r\nexport default Placeholder;","import { useEffect, useState } from 'react';\r\n\r\n\r\ntype TWindowSize = [number, number];\r\n\r\ntype THook = TWindowSize;\r\n\r\nexport default function useWindowResize  (): THook {\r\n  const initSize: TWindowSize = [\r\n    window.innerWidth,\r\n    window.innerHeight,\r\n  ];\r\n  const [windowSize, setWindowSize] = useState<TWindowSize>(initSize);\r\n\r\n  useEffect(() => {\r\n    const handleResize = (): void => {\r\n      setWindowSize([\r\n        window.innerWidth,\r\n        window.innerHeight,\r\n      ]);\r\n    };\r\n\r\n    window.addEventListener('resize', handleResize);\r\n    return () => {\r\n      window.removeEventListener('resize', handleResize);\r\n    };\r\n  }, []);\r\n  return windowSize;\r\n};","import React from \"react\";\r\nimport * as types from '../../types/types';\r\nimport styled from 'styled-components';\r\nimport useWindowResize from \"../../hooks/useWindowsize\";\r\n\r\nconst Stat: React.FC<types.StatProps> = (props) => {\r\n  const windowSize = useWindowResize();\r\n  const StyledStatDiv = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    font-size: 16px;\r\n    font-family: 'Comfortaa', cursive;\r\n    width: ${windowSize[0] < 640 ? '100%' : '30%'};\r\n    justify-content: ${windowSize[0] < 640 ? 'center' : 'space-between'};\r\n    margin: ${windowSize[0] < 640 ? '5%' : '0'};\r\n    \r\n    `\r\n  const StyleStatLabel = styled.div`\r\n    width: 80%;\r\n    border-radius: 15px;\r\n    padding: 6%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    color: #ffffff;\r\n    font-size: 16px;\r\n    background: ${props.color};\r\n    `;  \r\n  return (\r\n        <StyledStatDiv className=\"stat\" ><h1 style={{margin: 0}}>{props.num}</h1><StyleStatLabel className=\"stat-label\" >{props.text}</StyleStatLabel></StyledStatDiv>\r\n  )\r\n\r\n}\r\n\r\nexport default Stat;","import React from 'react';\r\nimport Stat from './Stat';\r\nimport { X } from 'react-bootstrap-icons';\r\nimport * as types from '../../types/types';\r\nimport styled from 'styled-components';\r\nimport useWindowResize from '../../hooks/useWindowsize';\r\n\r\nconst PopUp:React.FunctionComponent<types.popUpsProps> = (props) => {\r\n    const windowSize = useWindowResize();\r\n    const StyledDiv = styled.div`\r\n    position: fixed;\r\n    top: 0;\r\n    right: 0;\r\n    left: 0;\r\n    bottom: 0;\r\n    margin: auto;\r\n    height: fit-content;\r\n    width: 60vw;\r\n    display: ${props.display ? 'flex' : 'none'};\r\n    ${windowSize[0] < 640 ? 'flex-direction: column;': ''}\r\n    justify-content: space-evenly;\r\n    align-items: center;\r\n    box-shadow: 5px 5px 15px -5px #000000;\r\n    background: #ffffff;\r\n    border-radius: 15px;\r\n    padding: 3%;\r\n    `\r\n    const iterations: number = props.stats.length;\r\n    const popUps: JSX.Element[] = props.stats.map((stat,index) => <Stat interations={iterations} key={`key_${index}`} num={stat.num} text={stat.text} color={stat.color}></Stat>)\r\n    return (\r\n        <StyledDiv  className='pop-up'>\r\n        <div onClick={props.clickHandler}> <X className='x'/></div>\r\n\r\n            {popUps}\r\n        </StyledDiv>\r\n    )\r\n\r\n}\r\n\r\nexport default PopUp;","export function debounce<F extends (...params: any[]) => void>(fn: F, delay: number) {\r\n    let timeoutID: number;\r\n    return function(this: any, ...args: any[]) {\r\n      clearTimeout(timeoutID);\r\n      timeoutID = window.setTimeout(() => fn.apply(this, args), delay);\r\n    } as F;\r\n  }\r\n\r\n  export function hideLetters (str: string): string {\r\n    if (str === undefined) {\r\n        return 'string'\r\n    }\r\n    return str.split(\"\").map(char => Math.random() > 0.5 ? \"_\" : char).join(\"\");\r\n  }","import React from 'react';\r\nimport * as types from '../../types/types';\r\nimport { HeartFill } from 'react-bootstrap-icons';\r\nimport { Heart } from 'react-bootstrap-icons';\r\nimport styled from 'styled-components';\r\nimport useWindowResize from '../../hooks/useWindowsize';\r\n\r\n\r\nconst LifeBar: React.FunctionComponent<types.LifeBarProps> = (props) => {\r\n    const windowSize = useWindowResize();\r\n    const StyledDiv = styled.div`\r\n    display: flex;\r\n    width: 60%;\r\n    justify-content: space-evenly\r\n    `\r\n    const StyledContainer = styled.div`\r\n    display: flex;\r\n    width: ${windowSize[0] < 640 ? '60%' : '100%'};\r\n    justify-content: space-evenly\r\n    `\r\n    const fillHearts: (num: number) => JSX.Element = (num) => {\r\n        if (num < 1) {\r\n            return <StyledDiv><HeartFill className=\"heart\" /><HeartFill className=\"heart\" /><HeartFill className=\"heart\" /></StyledDiv>\r\n        }\r\n        if (num < 2) {\r\n            return <StyledDiv><HeartFill className=\"heart\" /><HeartFill className=\"heart\" /><Heart className=\"heart\" /></StyledDiv>\r\n        }\r\n        if (num < 3) {\r\n            return <StyledDiv><HeartFill className=\"heart\" /><Heart className=\"heart\" /><Heart className=\"heart\" /></StyledDiv>\r\n        }\r\n\r\n        return <HeartFill />\r\n    }\r\n    return (\r\n        <StyledContainer>\r\n            {fillHearts(props.num)}\r\n        </StyledContainer>\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default LifeBar;","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Button from './Components/Button';\nimport Input from './Components/Input'\nimport * as requests from './requests/requests';\nimport Placeholder from './Components/Placeholder';\nimport * as types from './types/types';\nimport { Spinner } from 'react-bootstrap';\nimport PopUp from './Components/PopUp/PopUp';\nimport * as utils from './utils';\nimport LifeBar from './Components/LifeBar/LifeBar'\nimport { ToastContainer, toast } from 'react-toastify';\nimport useWindowSize from './hooks/useWindowsize';\n\ninterface AppProps {\n  num?: number,\n  arr?: [],\n  bool?: boolean,\n  str?: string,\n}\n\nconst App: React.FC<AppProps> = ({ str = '', num = 0, arr = [], bool = false }) => {\n  const [score, setScore] = useState(num);\n  const [shows, setShows]: any = useState(arr);\n  const [index, setIndex] = useState(num);\n  const [loaded, setLoaded] = useState(bool);\n  const [guess, setGuess] = useState(str);\n  const [hint, setHint] = useState(bool);\n  const [right, setRight] = useState(Number(localStorage.getItem('right')) === null ? num : Number(localStorage.getItem('right')));\n  const [wrong, setWrong] = useState(Number(localStorage.getItem('wrong')) === null ? num : Number(localStorage.getItem('wrong')));\n  const [popUp, setPopUp] = useState(bool);\n  const [used, setUsed] = useState(Number(localStorage.getItem('used')) === null ? num : Number(localStorage.getItem('used')));\n  const [placeholder, setPlaceholder] = useState(str);\n  const [life, setLife] = useState(num);\n  const windowSize = useWindowSize();\n\n  const notifySucces = (str: string) => toast.success(str, {\n    position: \"top-center\",\n    autoClose: 1000,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n    progress: undefined,\n  });\n\n  const notifyError = (str: string) => toast.error(str, {\n    position: \"top-center\",\n    autoClose: 1000,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n    progress: undefined,\n  });\n\n\n  useEffect(() => {\n    async function makeShows() {\n      let temp = await requests.getShows();\n      setShows(temp);\n      \n      if (temp.length === 0) {\n        notifyError('network error');\n      } else {\n        console.log(windowSize[0]);\n        setPlaceholder(utils.hideLetters(temp[index].name));\n        setLoaded(true);\n      }\n      console.log(shows);\n    }\n    makeShows()\n  }, [])\n\n\n\n  const handleClickHint: () => void = () => {\n    setHint(true);\n    setUsed(used + 1);\n    localStorage.setItem('used',JSON.stringify(used+1));\n  }\n\n  const handleClickGuess: () => void = () => {\n    // console.log(guess.toLowerCase())\n    if (guess.toLowerCase() === shows[index].name.toLowerCase()) {\n      setIndex(index + 1);\n      setScore(score + 1);\n\n      setHint(false);\n      setRight(right + 1);\n      localStorage.setItem('right',JSON.stringify(right+1));\n      setPlaceholder(utils.hideLetters(shows[index + 1].name));\n      (document.getElementsByClassName('guess')[0] as HTMLInputElement).value = '';\n      if (index >= shows.length) {\n        setIndex(0);\n        notifySucces('You did it!');\n      }\n      notifySucces('nice!');\n    } else {\n      setWrong(wrong + 1);\n      localStorage.setItem('wrong',JSON.stringify(wrong+1));\n      setLife(life + 1);\n      notifyError('wrong...');\n      if (life > 1) {\n        notifyError('You Lose...');\n        resetGame();\n      }\n    }\n  }\n\n  const handleClickPopUp: () => void = () => {\n    if (popUp) {\n      setPopUp(false);\n    } else {\n      setPopUp(true);\n    }\n  }\n\n  const resetGame = () => {\n    setIndex(0);\n    setScore(0);\n    setHint(false);\n    setPlaceholder(utils.hideLetters(shows[0].name));\n    setLife(0);\n  }\n  const handleInput = (e: React.FormEvent<HTMLInputElement>) => {\n    setGuess((e.target as HTMLInputElement).value);\n  }\n\n\n\n  const stats: types.PopUpProps[] = [\n    {\n      text: 'Right guesses',\n      num: right,\n      color: '#DE9F4C'\n\n    },\n    {\n      text: 'Wrong guesses',\n      num: wrong,\n      color: '#0DB2B2'\n\n    },\n    {\n      text: 'Hint used',\n      num: used,\n      color: '#664FA7'\n\n    }\n  ]\n\n  if (!loaded) {\n    return (\n      <div className={'app'}>\n        <Spinner animation=\"border\" />\n      </div>\n\n    )\n  }\n\n\n  const statContainer = \n  <div className='stat-container'>\n    <p>{score}</p>\n    <Button\n      text={'Statistics'}\n      clickHandler={handleClickPopUp}\n      background={'#DE9F4C'}\n    />\n  </div>\n\n  return (\n    <div className=\"app\">\n      <div className=\"header\">\n        {windowSize[0] > 640 ? statContainer : ''}\n        \n        <h1>Guess the TV show</h1>\n        <LifeBar num={life} />\n      </div>\n      <div className=\"main\">\n      {windowSize[0] < 640 ? statContainer : ''}\n        <Placeholder text={placeholder} />\n        <Input InputHandler={handleInput} />\n        <div className=\"btn-container\">\n          <Button\n            text={'Check the guess'}\n            clickHandler={handleClickGuess}\n            background={'#0DB2B2'}\n          />\n          <Button\n            text={'Hint'}\n            clickHandler={handleClickHint}\n            background={hint ? 'rgb(11 122 122)' : '#0DB2B2'}\n          />\n\n        </div>\n        <div style={{ opacity: hint ? 1 : 0 }} className=\"description-container\">\n          {shows[index].description}\n        </div>\n      </div>\n      <PopUp\n        display={popUp}\n        stats={stats}\n        clickHandler={handleClickPopUp}\n      />\n      <ToastContainer />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'react-toastify/dist/ReactToastify.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}
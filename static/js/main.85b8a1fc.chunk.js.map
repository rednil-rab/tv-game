{"version":3,"sources":["Components/Button.tsx","Components/Input.tsx","requests/requests.ts","Components/Placeholder.tsx","Components/PopUp/Stat.tsx","Components/PopUp/PopUp.tsx","utils.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Button","props","style","background","className","onClick","ClickHandler","text","Input","onInput","InputHandler","API_KEY","getShows","a","axios","get","result","showArray","data","results","map","show","makeShowType","response","name","description","overview","date","first_air_date","Placeholder","Stat","width","interations","number","color","PopUp","iterations","stats","length","popUps","stat","display","hideLetters","string","undefined","split","char","Math","random","join","App","word","initial","array","bool","useState","score","setScore","shows","setShows","index","setIndex","loaded","setLoaded","guess","setGuess","hint","setHint","right","setRight","wrong","setWrong","popUp","setPopUp","used","setUsed","placeholder","setPlaceholder","useEffect","requests","temp","console","log","utils","makeShows","handleClick3","Spinner","animation","e","target","value","toLowerCase","opacity","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.85b8a1fc.chunk.js","sourcesContent":["import React from 'react';\r\nimport * as types from '../types/types'\r\n\r\n\r\nconst Button: React.FC<types.ButtonProps> = (props) => <button style={{background: props.background}} className=\"btn\"  onClick={props.ClickHandler}>{props.text}</button>\r\n\r\nexport default Button;","import React from 'react';\r\n\r\ninterface placeholderProps {\r\n    InputHandler: ( React.FormEventHandler<HTMLInputElement>)\r\n}\r\n\r\n\r\nconst Input: React.FC<placeholderProps> = (props) => <input className=\"guess\" onInput={props.InputHandler}></input>\r\n\r\nexport default Input;","import axios, {AxiosResponse} from 'axios';\r\nimport * as types from '../types/types';\r\n\r\nconst API_KEY = '?api_key=3fdaa33085edc159f3194e8492441486'\r\n\r\nexport async function getShows(): Promise<types.Show[]>   {\r\n    try {\r\n        const result: AxiosResponse = await axios.get(`https://api.themoviedb.org/3/tv/top_rated${API_KEY}`);\r\n        // do something with the result to make a Show array\r\n        const showArray: types.Show[] = result.data.results.map((show: any) => {\r\n           return makeShowType(show)\r\n        })\r\n        return showArray;\r\n    } catch (e) {\r\n        return []\r\n    }\r\n    \r\n\r\n}\r\n\r\nfunction makeShowType(response: any): types.Show {\r\n    let show: types.Show = {\r\n        name: response.name,\r\n        description: response.overview,\r\n        date: response.first_air_date\r\n    }\r\n    return show;\r\n}","import React from 'react';\r\n\r\ninterface PlaceholderProps {\r\n    text: string;\r\n}\r\n\r\n\r\n\r\nconst Placeholder: React.FC<PlaceholderProps> = (props) => <h1 className=\"placeholder\" >{props.text}</h1>\r\n\r\nexport default Placeholder;","import React from \"react\";\r\nimport * as types from '../../types/types';\r\n\r\n\r\nconst Stat: React.FC<types.StatProps> = (props) => <div className=\"stat\" style={{width: `${100/props.interations*0.9}%`}}><h1>{props.number}</h1><div className=\"stat-label\" style={{background: props.color}}>{props.text}</div></div>;\r\n\r\nexport default Stat;","import React, {useState} from \"react\";\r\nimport Stat from './Stat';\r\nimport { X } from 'react-bootstrap-icons';\r\nimport * as types from '../../types/types';\r\nimport './popup.css';\r\n\r\n\r\nconst PopUp:React.FunctionComponent<types.popUpsProps> = (props) => {\r\n    const iterations: number = props.stats.length;\r\n    const popUps:  JSX.Element[] =   props.stats.map(stat => <Stat interations={iterations} number={stat.number} text={stat.text} color={stat.color}></Stat>)\r\n\r\n    return (\r\n        <div style={{display: props.display ? \"flex\" : \"none\"}} className=\"pop-up\">\r\n            <div onClick={props.ClickHandler}> <X className=\"x\"/></div>\r\n\r\n            {popUps}\r\n            \r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default PopUp;","export function debounce<F extends (...params: any[]) => void>(fn: F, delay: number) {\r\n    let timeoutID: number;\r\n    return function(this: any, ...args: any[]) {\r\n      clearTimeout(timeoutID);\r\n      timeoutID = window.setTimeout(() => fn.apply(this, args), delay);\r\n    } as F;\r\n  }\r\n\r\n  export function hideLetters (string: string): string {\r\n    if (string === undefined) {\r\n        return 'string'\r\n    }\r\n    return string.split(\"\").map(char => Math.random() > 0.5 ? \"_\" : char).join(\"\");\r\n  }","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Button from './Components/Button';\nimport Input from './Components/Input'\nimport * as requests from './requests/requests';\nimport Placeholder from './Components/Placeholder';\nimport * as types from './types/types';\nimport { Spinner } from 'react-bootstrap';\nimport PopUp from './Components/PopUp/PopUp';\nimport * as utils from './utils';\n\ninterface AppProps {\n  initial?: number,\n  array?: [],\n  bool?: boolean,\n  word?: string,\n}\n\n\n\nconst App: React.FunctionComponent<AppProps> = ({ word = 'asafaf', initial = 0, array = [], bool = false }) => {\n  const [score, setScore] = useState(initial);\n  const [shows, setShows]: any = useState(array);\n  const [index, setIndex] = useState(initial);\n  const [loaded, setLoaded] = useState(bool);\n  const [guess, setGuess] = useState(word);\n  const [hint, setHint] = useState(bool);\n  const [right, setRight] = useState(initial);\n  const [wrong, setWrong] = useState(initial);\n  const [popUp,setPopUp] = useState(bool);\n  const [used,setUsed] = useState(initial);\n  const [placeholder,setPlaceholder] = useState(word);\n\n  useEffect(() => {\n    async function makeShows() {\n      let temp = await requests.getShows();\n      setShows(temp);\n      console.log(shows);\n      setPlaceholder(utils.hideLetters(temp[index].name));\n      setLoaded(true);\n      \n    }\n    makeShows()\n  }, [])\n\n\n  const handleClick: () => void = () => {\n    setHint(true);\n    setUsed(used+1);\n  }\n  const handleClick2: () => void = () => {\n    // console.log(guess.toLowerCase())\n    if (guess.toLowerCase() === shows[index].name.toLowerCase()) {\n      setIndex(index + 1);\n      setScore(score + 1);\n      setHint(false);\n      setRight(right + 1);\n      debugger;\n      setPlaceholder(utils.hideLetters(shows[index+1].name));\n    } else {\n      setWrong(wrong + 1);\n    }\n  }\n  const handleClick3: () => void = () => {\n    if (popUp) {\n      setPopUp(false);\n    } else {\n      setPopUp(true);\n    }\n  }\n  const handleInput = (e: React.FormEvent<HTMLInputElement>) => {\n    setGuess((e.target as HTMLInputElement).value);\n  }\n\n\n\n  if (!loaded) {\n    return (\n      <div className={'App'}>\n        <Spinner animation=\"border\" />\n      </div>\n\n    )\n  }\n\n  const stats: types.PopUpProps[] = [\n    {\n      text: 'Right guesses',\n      number: right,\n      color: '#DE9F4C'\n\n    },\n    {\n      text: 'Wrong guesses',\n      number: wrong,\n      color: '#0DB2B2'\n\n    },\n    {\n      text: 'Hint used',\n      number: used,\n      color: '#664FA7'\n\n    }\n  ]\n  return (\n    <div className=\"App\">\n\n      <div className=\"header\">\n        <div>\n          <h2>{score}</h2>\n          <Button\n            text={'Statistics'}\n            ClickHandler={handleClick3}\n            background={'#DE9F4C'}\n          />\n        </div>\n\n        <h1>Guess the TV show</h1>\n        <div className=\"heart-container\">\n\n        </div>\n      </div>\n      <div className=\"main\">\n        <Placeholder text={placeholder} />\n        <Input InputHandler={handleInput} />\n        <div className=\"btn-container\">\n          <Button\n            text={'Check the guess'}\n            ClickHandler={handleClick2}\n            background={'#0DB2B2'}\n          />\n          <Button\n            text={'Hint'}\n            ClickHandler={handleClick}\n            background={hint ? 'rgb(11 122 122)' : '#0DB2B2'}\n          />\n\n        </div>\n        <div style={{ opacity: hint ? 1 : 0 }} className=\"description-container\">\n          {shows[index].description}\n        </div>\n      </div>\n      <PopUp\n        display={popUp}\n        stats={stats}\n        ClickHandler={handleClick3}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}